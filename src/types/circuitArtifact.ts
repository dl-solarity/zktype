import { SignalType, SignalVisibility } from "./ast";

/**
 * Represents a circuit artifact generated by the `CircuitArtifactGenerator`.
 *
 * @param {string} _format - The format version of the circuit artifact.
 * @param {string} circuitName - The name of the main component in the circuit.
 * @param {string} sourceName - The circuit file path relative to the project root.
 * @param {string} basePath - The root directory of the project for circuits.
 * @param {string} compilerVersion - The version of the Circom compiler specified in the circuit.
 * @param {Signal[]} signals - An array of `input` and `output` signals used in the circuit.
 */
export interface CircuitArtifact {
  _format: string;
  circuitName: string;
  sourceName: string;
  basePath: string;
  compilerVersion: string;
  signals: Signal[];
}

/**
 * Represents a signal used in a circuit.
 *
 * @param {string} name - The name of the signal.
 * @param {SignalType} type - The type of the signal (possible values: `Input`, `Output`).
 * @param {string} visibility - The visibility of the signal (possible values: `public`, `private`).
 * @param {string} internalType - The internal type of the signal (only possible value: `bigint`).
 * @param {number} dimensions - The array of dimensions of the signal. If the signal is a scalar, the value is `[]`.
 * For example for a signal a[2][3], the value is `[2, 3]`.
 */
export interface Signal {
  name: string;
  type: SignalType;
  visibility: SignalVisibility;
  internalType: string;
  dimensions: number[];
}
