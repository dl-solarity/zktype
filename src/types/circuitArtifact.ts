export type FormatTypes = "hh-zkit-artifacts-1";

export type SignalType = "Output" | "Input" | "Intermediate";

export type VisibilityType = "Public" | "Private";

/**
 * Represents a circuit artifact generated by the `CircuitArtifactGenerator`.
 *
 * @param {string} _format - The format version of the circuit artifact.
 * @param {string} circuitName - The name of the main component in the circuit.
 * @param {string} sourceName - The circuit file path relative to the project root.
 * @param {string} basePath - The root directory of the project for circuits.
 * @param {string} compilerVersion - The version of the Circom compiler specified in the circuit.
 * @param {BaseCircuitInfo} baseCircuitInfo - The base circuit information.
 */
export type CircuitArtifact = {
  _format: FormatTypes;
  circuitFileName: string;
  circuitTemplateName: string;
  circuitSourceName: string;
  baseCircuitInfo: BaseCircuitInfo;
};

/**
 * Represents the base circuit information.
 *
 * @param {string} protocol - The proving system protocol used in the circuit.
 * @param {number} constraintsNumber - The number of constraints in the circuit.
 * @param {SignalInfo[]} signals - The array of `input` and `output` signals used in the circuit.
 */
export type BaseCircuitInfo = {
  protocol: ["groth16" | "plonk"];
  constraintsNumber: number;
  signals: SignalInfo[];
};

/**
 * Represents a signal used in a circuit.
 *
 * @param {string} name - The name of the signal.
 * @param {SignalType} type - The type of the signal (possible values: `Input`, `Output`).
 * @param {VisibilityType} visibility - The visibility of the signal (possible values: `Public`, `Private`).
 * @param {string} dimensions - The array of dimensions of the signal. If the signal is a scalar, the value is `[]`.
 * For example for a signal a[2][3], the value is `[2, 3]`.
 */
export type SignalInfo = {
  name: string;
  dimension: string[];
  type: SignalType;
  visibility: VisibilityType;
};
