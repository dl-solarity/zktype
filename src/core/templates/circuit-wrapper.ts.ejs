import {
  CircuitZKit,
  CircuitZKitConfig,
  Groth16Proof,
  NumberLike,
  NumericString,
  PublicSignals,
} from "@solarity/zkit";

import { flatten, reshape } from "<%= pathToUtils %>";

export type <%= privateInputsTypeName %> = {
<% for (let i = 0; i < privateInputs.length; i++) { -%>
    <%= privateInputs[i].name %>: NumberLike <%= privateInputs[i].dimensions %>;
<% } -%>
}

export type <%= publicInputsTypeName %> = {
<% for (let i = 0; i < publicInputs.length; i++) { -%>
    <%= publicInputs[i].name %>: NumericString <%= publicInputs[i].dimensions %>;
<% } -%>
}

export type <%= proofTypeName %> = {
  proof: Groth16Proof;
  publicSignals: <%= publicInputsTypeName %>;
}

export type Calldata = [
    [NumericString, NumericString],
    [[NumericString, NumericString], [NumericString, NumericString]],
    [NumericString, NumericString],
    <%= calldataPubSignalsType %>,
];

export class <%= circuitClassName %> extends CircuitZKit {
  constructor(config: CircuitZKitConfig) {
    super(config);
  }

  public async generateProof(inputs: <%= privateInputsTypeName %>): Promise<<%= proofTypeName %>> {
    const proof = await super.generateProof(inputs as any);

    return {
      proof: proof.proof,
      publicSignals: this._normalizePublicSignals(proof.publicSignals),
    };
  }

  public async calculateWitness(inputs: <%= privateInputsTypeName %>): Promise<bigint[]> {
    return await super.calculateWitness(inputs as any);
  }

  public async verifyProof(proof: <%= proofTypeName %>): Promise<boolean> {
    return await super.verifyProof({
      proof: proof.proof,
      publicSignals: this._denormalizePublicSignals(proof.publicSignals),
    });
  }

  public async generateCalldata(proof: <%= proofTypeName %>): Promise<Calldata> {
    return await super.generateCalldata({
      proof: proof.proof,
      publicSignals: this._denormalizePublicSignals(proof.publicSignals),
    });
  }

  public getSignalNames(): string[] {
    return [
        <% for (let i = 0; i < publicInputs.length; i++) { -%>
            "<%= publicInputs[i].name %>",
        <% } -%>
    ];
  }

  public getSignalDimensions(name: string): number[] {
    switch (name) {
      <% for (let i = 0; i < publicInputs.length; i++) { -%>
        case "<%= publicInputs[i].name %>": return [<%= publicInputs[i].dimensionsArray %>];
      <% } -%>
      default: throw new Error(`Unknown signal name: ${name}`);
    }
  }

  private _normalizePublicSignals(publicSignals: PublicSignals): <%= publicInputsTypeName %> {
    const signalNames = this.getSignalNames();

    let index = 0;
    return signalNames.reduce((acc: any, signalName) => {
      const dimensions = this.getSignalDimensions(signalName);
      const size = dimensions.reduce((a, b) => a * b, 1);
      acc[signalName] = reshape(publicSignals.slice(index, index + size), dimensions);
      index += size;
      return acc;
    }, {});
  }

  private _denormalizePublicSignals(publicSignals: <%= publicInputsTypeName %>): PublicSignals {
    const signalNames = this.getSignalNames();

    return signalNames.reduce((acc: any[], signalName) => {
      return acc.concat(flatten(publicSignals[signalName]));
    }, []);
  }
}

export default <%= circuitClassName %>;
